Creature: cAppleTree {

    name = "Apple tree";
    mesh = "apple_tree_mature.ply";
    fruit = "entApple";

	drives {
		driPlantReproduction;
		driGrow;
	}

	knowledge {
		proPhotoSynthesis;
		proCreateFruit;
		proGrow;
	}

	attributes{
	    attMaxHealth, 100;
	    attTicks, 2;
		attSize, 60;
	    attMatureAge, 420;//2880;
	    attLightSensitivity, 20;
	    //attBabySize, 100;
	}

    Stage: seed {
        name = "Apple seed";
        mesh = "apple_seed.ply";

        drives { driGrowIntoTree; }
        knowledge { proGrowIntoTree; }

        Script: tick() {
            if (isOnFloor(self) && chance(0.001)) {
                destroy(self);
            }
        }
    }

    Stage: sapling {
        mesh = "apple_tree_young.ply";
    }

    Stage: ripe {
        mesh = "apple_tree_mature_ripe.ply";
    }

	Script: new {
		..attNutrition += 100;

        for (n : getNeighbors(self)) {
            effect = addEffect(n, effShadow);
            effect->cause = self;
        }
	}

	Script: tick {
	    delayNextTick(self, .attTicks);
	    ..attAge++;

        if (chance(0.01)) {
            create(entBranch, getNeighbor(self, random(3)));
        }

	    if (getWaterHeight(self) > getHeight(self)) {
	        ..attHealth--;
	    }

		if (.attAge > .attMatureAge * 3) { // age death
		    addEffect(self, effCancer);
        }

		if (.attHealth < - .attMaxHealth) { // death
		    destroy(self);
        }
	}

    Script: inherit(parent) {
        mixAttributes(self, parent, parent);
	}
}


///////////////////////////////////////////////////////////////////////////// Tree


///////////////////////////////////////////////////////////////////////////// Fruit

Entity: entApple {
	name = "Apple";
	mesh = "apple_6x_loose.ply";

	attributes {
		attVegetarian, 1;
		attMatureAge, 100;
		attNutrition, 100; // default value
	}

	Script: tick() {
	    tree = getHolder(self);
	    if (tree && inStage(tree, "ripe")) {
	        if (chance(0.07)) {
	            tile = getNeighbor(getTile(self), random(3));
	            pickUp(tile, self);
	            setDefaultStage(tree);
	        }
	    } else {
            ..attAge++;

            if (.attAge >= .attMatureAge) {
                addEffect(getTile(self), "Fertilized", .attMatureAge, [ "attNutrition", self.attNutrition/2 ]);

                for (seed : getItems(self)) {
                    pickUp(getTile(self), seed);
                }
                destroy(self);
            }
		}
	}

	Script: consume(actor) {
	    effect = addEffect(actor, effDigest);
        effect..attNutrition = .attNutrition;
        for (item : getItems(self)) {
            pickUp(effect, item);
        }

		destroy(self);
	}
}

///////////////////////////////////////////////////////////////////////////// Drives

Drive: driPlantReproduction {
	solutions {
		proCreateFruit;
		proPhotoSynthesis;
	}

	Script: getWeight {
	    return(100 * .attNutrition / .attMaxHealth);
	}
}

Drive: driGrowIntoTree {
    solutions { proGrowIntoTree; }

    Script: getWeight { return(getLightLevel(self) - .attLightSensitivity); }
}

Drive: driGrow {
    solutions { proGrow; }

    Script: condition { return true; }

    Script: getWeight {
        return(50 - .attHealth / .attMaxHealth);
    }
}

///////////////////////////////////////////////////////////////////////////// Processes

Process: proPhotoSynthesis {
	Script: condition {
		require(getLightLevel(self) + getTile(self).attLightLevel >= .attLightSensitivity);
		require(getStage(self) != "seed");
	}
	Script: process {
		..attNutrition += 1;
		getTile(self)..attHumidity--;
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

Process: proCreateFruit {
	Script: condition {
		require(.attNutrition >= .attMaxHealth);
		require(inDefaultStage(self));
	}

	Script: process {
	    setStage(self, "ripe");

		fruit = create(getProperty(self, "fruit"), self);
		..attNutrition -= .attMaxHealth;
		fruit..attNutrition += .attMaxHealth;

		seed = create(getType(self), fruit);
        setStage(seed, "seed");
		seed->inherit(self);
	}
}

Process: proGrowIntoTree {
    Script: condition {
        tile = getTile(self);

        require(isOnFloor(self));
        require(getLightLevel(self) >= .attLightSensitivity);
        require(getFullAtt(tile, "attSize") < 100);
        require(getHeight(self) >= getWaterHeight(self));

        //print(tile.attNutrition + " >= " + .attBabySize);
        //require(tile.attNutrition >= .attBabySize);
    }
    Script: process {
        setStage(self, "sapling");
        addEffect(self, effSapling);
    }
}

Process: proGrow {
    Script: condition {
        require(.attHealth < 0);
        require(.attNutrition > 0);
    }

    Script: process {
        ..attHealth++;
        ..attNutrition--;
    }
}

///////////////////////////////////////////////////////////////////////////// Effects

Effect: effSapling {
    name = "Sapling";

    Script: removeCondition(carrier) {
        require(carrier.attAge >= carrier.attMatureAge);
    }

    Script: finally(carrier) {
        setDefaultStage(self);
    }
}


Effect: effShadow {
    name = "Shadow";

    attributes {
        attLightLevel, "-10";
    }

    Script: removeCondition() {
        require(! ->cause);
    }
}

