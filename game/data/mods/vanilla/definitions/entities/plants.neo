
///////////////////////////////////////////////////////////////////////////// Tree

Creature: cAppleTree {
	name = "Apple tree";
	mesh = "apple_tree_mature.ply";

	drives {
		driPlantReproduction;
		driHeal;
	}

	knowledge {
		proPhotoSynthesis;
		proCreateFruit;
		proHeal;
	}

	Script: place {
		..attNutrition += random(100);
		self->fruitType = entApple;

        ->updateMesh();
	}

	attributes{
	    attMatureAge, 2880;
	    attLightSensitivity, 20;
	    attBabySize, 30;
	}

	Script: tick {
	    ..attAge++;

		if (.attHealth < 0) { // death
		    destroy(self);
        }

		if (.attAge > .attMatureAge*2) { // age death
		    addEffect(self, effCancer);
        }
	}

	Script: updateMesh() {
	    if (.attAge < .attMatureAge) {
            setMesh(self, "vanilla/assets/meshes/apple_tree_young.ply");
        } else {
            if (getItems(self, entApple)) {
                setMesh(self, "vanilla/assets/meshes/apple_tree_mature_ripe.ply");
            } else {
                setMesh(self, "vanilla/assets/meshes/apple_tree_mature.ply");
            }
        }
	}
}

///////////////////////////////////////////////////////////////////////////// Fruit

Entity: entApple {
	name = "Apple";
	mesh = "apple_6x_loose.ply";

	attributes {
		attEdible, 1;
		attMatureAge, 100;
	}

	Script: place() {
	    ->seed = create(cAppleSeed, self);
    }

    Script: mix(parent) {
	    if (parent) {
	        mixAttributes(->seed, parent, parent);
	    } else {
	        print("no parents!");
	    }
	}

	Script: tick() {
	    tree = getHolder(self);
	    if (tree && getType(tree) == cAppleTree) {
	        if (chance(0.07)) {
	            tile = getNeighbor(getTile(self), random(3));
	            pickUp(tile, self);
	            tree->updateMesh();
	        }
	    } else {
            ..attAge++;

            if (.attAge >= .attMatureAge) {
                addEffect(getTile(self), "Fertilized", .attMatureAge, [ "attNutrition", self.attNutrition/2 ]);
                if (->seed) {
                    pickUp(getTile(self), ->seed);
                }
                destroy(self);
            }
		}
	}

	Script: consume(actor) {
	    effect = addEffect(actor, effDigest);
        effect..attNutrition = .attNutrition;
        for (item : getItems(self)) {
            pickUp(effect, item);
        }

		destroy(self);
	}
}

Creature: cAppleSeed {
    name = "Apple seed";
    mesh = "apple_seed.ply";

    drives { driGrowIntoTree; }

    knowledge { proGrowIntoTree; }

    Script: place() {
        self->treeType = cAppleTree;
    }

    Script: tick() {
        if (chance(0.001)) {
            destroy(self);
        }
    }
}

///////////////////////////////////////////////////////////////////////////// Drives

Drive: driPlantReproduction {
	solutions {
		proCreateFruit;
		proPhotoSynthesis;
	}

	Script: getWeight {
	    return(.attNutrition);
	}
}

Drive: driGrowIntoTree {
    solutions { proGrowIntoTree; }

    Script: getWeight { return(getLightLevel(self) - .attLightSensitivity); }
}

Drive: driHeal {
    solutions { proHeal; }

    Script: condition {
        require(.attHealth < 100);
    }

    Script: getWeight {
        return(100 - .attHealth);
    }
}

///////////////////////////////////////////////////////////////////////////// Processes

Process: proPhotoSynthesis {
	Script: condition {
		require(getLightLevel(self) >= .attLightSensitivity);
		require(.attAge >= .attMatureAge);
	}
	Script: process {
		..attNutrition++;
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

Process: proCreateFruit {
	Script: condition {
		require(!getAttInRange("attEdible", self, 1));
		require(.attNutrition >= .attBabySize);
		require(.attAge >= .attMatureAge);
		require(!getItems(self, entApple));
	}

	Script: process {
		fruit = create(self->fruitType, self);
		fruit->mix(self);
		..attNutrition -= .attBabySize;
		fruit..attNutrition += .attBabySize;
        self->updateMesh();
	}
}

Process: proGrowIntoTree {
    Script: condition {
        tile = getTile(self);

        require(isOnFloor(self));
        require(getLightLevel(self) >= .attLightSensitivity);
        require(!getInstancesInRange(self->treeType, tile, 0));
        require(getHeight(self) >= 100);
        require(tile.attNutrition >= .attBabySize/2);
    }
    Script: process {
        tree = create(self->treeType, getTile(self));
        mixAttributes(tree, self, self);
        addEffect(tree, effSapling);
        tree..attHealth = .attBabySize;

        destroy(self);
    }
}

Process: proHeal {
    Script: condition {
        require(getLightLevel(self) < .attLightSensitivity);
    }

    Script: process {
        ..attHealth++;
    }
}

///////////////////////////////////////////////////////////////////////////// Effects

Effect: effSapling {
    name = "Sapling";

    Script: removeCondition(carrier) {
        require(carrier.attAge >= carrier.attMatureAge);
    }

    Script: finally(carrier) {
        carrier->updateMesh();
    }
}
