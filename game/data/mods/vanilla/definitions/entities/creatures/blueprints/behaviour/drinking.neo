
///////////////////////////////////////////////////////////////////////////// Effects

Effect: effThirsty {
    name = "Thirsty";

    attributes {
        attHealth, "-1";
        attSpeed, "-1";
    }

    Script: tick (carrier) {
        if (carrier.attHydrated > 0) {
            if (.attHealth < 0) {
                ..attHealth++;
            }
        } else {
            if (chance(0.5)) {
                ..attHealth--;
            }
        }
    }

    Script: removeCondition {
        require(.attHealth >= 0);
    }
}

Effect: effDrink {
    name = "Drink";

    attributes {
        attHydrated, 10;
    }

    Script: tick(carrier) {
        if (chance(0.005)) {
            ..attHydrated--;
        }
    }
    Script: removeCondition() { require(.attHydrated <= 0); }
}

///////////////////////////////////////////////////////////////////////////// Drives

Drive: driThirst {
	Script: condition {
	    require(! .attSleeping);
	    if (.attHydrated <= 0 && !getEffects(self, effThirsty)) {
	        addEffect(self, effThirsty);
	    }
		require(.attHydrated <= .attThirstSensitivity);
	}

	solutions = {
	    proDrink;
	}

	Script: getWeight() {
	    return((.attThirstSensitivity - .attHydrated) * 10);
	}
}

///////////////////////////////////////////////////////////////////////////// Processes

Process: proDrink {
    Script: condition {
        ->source = getInstance(entWater, getTile(self));
        require(->source);
    }

    Script: process {
        addEffect(self, effDrink);
        ->source..attWater--;
        ->source = false;
    }

    solutions = {
        proSearchWater;
    }
}

Process: proSearchWater {
    Script: condition {
        if (! ->source) {
            ->source = getInstanceInRange(entWater, self, .attViewingDistance);
        }
        require(->source);
    }

    Script: process {
        moveTo(self, ->source, .attSpeed);
    }
}