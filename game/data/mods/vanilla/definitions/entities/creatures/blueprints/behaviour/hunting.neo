
///////////////////////////////////////////////////////////////////////////// Effects

Effect: effBite {
    name = "Bite";

    attributes {
        attHealth, "-10"; // default value
    }

    Script: tick (carrier) {
        if (carrier.attSleeping) {
            if (carrier.attNutrition > 0) {
                if (.attHealth < 0) {
                    ..attHealth++;
                }
            } else {
                carrier..attFatigue++;
            }
        }
    }

    Script: removeCondition {
        require(.attHealth >= 0);
    }
}

///////////////////////////////////////////////////////////////////////////// Processes

Process: proEatMeat {
	Script: condition {
	    ->carcass = getInstanceInRange(entCarcass, self, 1);
	    print("tiger wanna eat? carcass: " + ->carcass);
		require(->carcass);
	}
	Script: process {
	    print(self + " eats " + ->carcass);
		->carcass->consume(self);
	}

	solutions = {
	    proLookForCarcass;
	    proKillAnimal;
	}
}

Process: proLookForCarcass {
    Script: condition {
        ->carcass = getInstanceInRange(entCarcass, self, .attViewingDistance);
	    print("tiger search carcass: " + ->carcass);
        require(->carcass);
    }

    Script: process {
        moveTo(self, ->carcass, .attSpeed);
    }
}

Process: proKillAnimal {
    Script: condition {
        if (! ->target) {
            print(self + " searching for target");
            creatures = getAttsInRange("attMeat", getTile(self), .attViewingDistance);
            backup = false;
            for (creature : creatures) {
                if (creature != self) {
                    if (getType(creature) != getType(self)) {
                        ->target = creature;
                        break;
                    } else {
                        backup = creature;
                    }
                }
            }
            if (! ->target && backup && .attNutrition <= 0) {
                ->target = backup;
            }
        }
        print("target: " + ->target);
        require(->target);
    }

    Script: process {
	    print(self + " hunts " + ->target);
        tile = moveTo(self, ->target, .attSpeed);
        if (getTile(->target) == tile) {
            print("bites target");

            bite = addEffect(->target, effBite);
            bite..attHealth = - .attBiteSize;
        }
    }
}