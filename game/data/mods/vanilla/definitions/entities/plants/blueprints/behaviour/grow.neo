///////////////////////////////////////////////////////////////////////////// Grow

Drive: driGrow {
    solutions { proGrow; }

    Script: condition { return .bodySize < .bodyPreference; }

    Script: getWeight {
		if (.bodySize >= .bodyPreference) { return .bodyHealth + .bodyRestoration; }
		
        return(min(100, 100 + .bodyRestoration - percent(.bodySize, 100)));
    }
}

Process: proGrow {
    Script: condition {
		require(getFullAtt(getTile(self), "bodySize") < 100);
        require(.attNutrition >= .bodyRestoration);
    }

    Script: process {
		..bodySize += .bodyRestoration;
		..attNutrition -= .bodyRestoration * (1 - .attEfficieny / 100);
    }
}

///////////////////////////////////////////////////////////////////////////// Grow into tree

Drive: driGrowIntoPlant {
    solutions { proGrowIntoPlant; }

    Script: condition {
		return length(getItems(getTile(self), getType(self))) < 100 / max(1, .bodyPreference);
	}

    Script: getWeight {
        return 100;
    }
}

Process: proGrowIntoPlant {
    Script: condition {
        tile = getTile(self);

        require(isOnFloor(self));
        require(getLightLevel(self) + getTile(self).attLightLevel >= 100 - .bodyEfficiency);
        require(getFullAtt(tile, "bodySize") < 100);
        require(getHeight(self) >= getWaterHeight(self));
    }
    Script: process {
        setStage(self, "sapling");
		
        for (n : getNeighbors(self)) {
            effect = addEffect(n, effShadow);
            effect->cause = self;
        }
		
		forget(->age);
    }
}

///////////////////////////////////////////////////////////////////////////// Photosynthesis

Drive: driGatherEnergy {
    solutions {
		proPhotosynthesis;
		proLeechFromHolder;
	}

    Script: getWeight {
		if (.bodyPreference > 0) { nutWeight = 90 * .attNutrition / .bodyPreference; }
		if (.attWater > 0) { waterWeight = 90; }
        return(waterWeight - nutWeight);
    }
}

Process: proPhotosynthesis {
	Script: condition {
		->ll = getLightLevel(self) + getTile(self).attLightLevel;
		// print("ll: " + ll);
        require(->ll > 100 - .bodyEfficiency);
		require(getStage(self) != "seed");
		require(.attWater > 0);
	}
	
	Script: process {
		divisor = 100;
		if (contains( getPropertyList(self, "prefers") , getType(getTile(self)) ) ) {
			divisor = 50;
		}
	
		if (! chance(.bodyEfficiency / divisor)) { ..attWater--; }
		
		surplus = ->ll + .bodyEfficiency - 100;
		..attNutrition += min(surplus, ..bodyRestoration);
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

///////////////////////////////////////////////////////////////////////////// Leeching

Process: proLeechFromHolder {
	Script: condition {
		require(getHolder(self));
		require(getHolder(self).attNutrition > 0);
	}
	
	Script: process {
		getHolder(self)..attNutrition--;
		if (chance(.bodyEfficiency / 100)) {
			self..attNutrition += .bodyRestoration;
		}
	}
}
