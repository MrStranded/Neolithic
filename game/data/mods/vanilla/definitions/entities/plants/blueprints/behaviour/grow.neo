///////////////////////////////////////////////////////////////////////////// Grow

Drive: driGrow {
    solutions { proGrow; }

    Script: condition { return .bodySize < .bodyPreference; }

    Script: getWeight {
        return(100 - percent(.bodySize, .bodyPreference));
    }
}

Process: proGrow {
    Script: condition {
		require(getFullAtt(getTile(self), "bodySize") < 100);
        require(.bodyHealth > 0);
    }

    Script: process {
		..bodySize += .bodyRestoration;
		..bodyHealth -= .bodyRestoration * (1 - .attEfficieny / 100);
    }
}

///////////////////////////////////////////////////////////////////////////// Grow into tree

Drive: driGrowIntoPlant {
    solutions { proGrowIntoPlant; }

    Script: condition {
		return length(getItems(getTile(self))) < 4;
	}

    Script: getWeight {
        return 100;
    }
}

Process: proGrowIntoPlant {
    Script: condition {
        tile = getTile(self);

        require(isOnFloor(self));
        require(getLightLevel(self) + getTile(self).attLightLevel >= 100 - .bodyEfficiency);
        require(getFullAtt(tile, "bodySize") < 100);
        require(getHeight(self) >= getWaterHeight(self));
    }
    Script: process {
        setStage(self, "sapling");
		
        for (n : getNeighbors(self)) {
            effect = addEffect(n, effShadow);
            effect->cause = self;
        }
    }
}

///////////////////////////////////////////////////////////////////////////// Photosynthesis

Drive: driGatherEnergy {
    solutions {
		proPhotosynthesis;
		proLeechFromHolder;
	}

    Script: condition {
		// require(.bodySize > 0);
		// require(.bodyHealth < .bodyPreference * .bodyResiliance);
	}

    Script: getWeight {
		nutWeight = 50 - .bodyHealth / (.bodyRestoration);
		if (.bodySize > 0) { waterWeight = 50 * .attWater / .bodySize; }
		else { waterWeight = 50; }
        return(nutWeight + waterWeight);
    }
}

Process: proPhotosynthesis {
	Script: condition {
		->ll = getLightLevel(self) + getTile(self).attLightLevel;
		// print("ll: " + ll);
        require(->ll > 100 - .bodyEfficiency);
		require(getStage(self) != "seed");
		require(.attWater > 0);
	}
	Script: process {
		if (! chance(.bodyEfficiency / 100)) { ..attWater--; }
		
		surplus = ->ll + .bodyEfficiency - 100 - .bodyExperience / .bodyPreference;
		..bodyHealth += min(surplus, ..bodyRestoration);
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

///////////////////////////////////////////////////////////////////////////// Leeching

Process: proLeechFromHolder {
	Script: condition {
		require(getHolder(self));
		require(getHolder(self).attNutrition > 0);
	}
	
	Script: process {
		getHolder(self)..attNutrition--;
		if (chance(.bodyEfficiency / 100)) {
			self..bodyHealth += .bodyRestoration;
		}
	}
}
