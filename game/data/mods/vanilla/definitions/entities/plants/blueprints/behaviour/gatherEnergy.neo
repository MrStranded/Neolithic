///////////////////////////////////////////////////////////////////////////// Photosynthesis

Drive: driGatherEnergy {
    solutions {
		proPhotosynthesis;
		proLeechFromHolder;
	}

    Script: getWeight {
		if (.bodyPreference > 0) { nutWeight = 90 * .attNutrition / .bodyPreference; }
		if (.attWater > 0) { waterWeight = 90; }
        return(waterWeight - nutWeight);
    }
}

Process: proPhotosynthesis {
	Script: condition {
		->ll = getLightLevel(self) + getTile(self).attLightLevel;
		// print("ll: " + ll);
        require(->ll > .sensitivity);
		require(getStage(self) != "seed");
		require(.attWater > 0);
	}
	
	Script: process {
		divisor = 100;
		if (contains( getPropertyList(self, "prefers") , getType(getTile(self)) ) ) {
			divisor = 50;
		}
	
		if (! chance(.bodyEfficiency / divisor)) { ..attWater--; }
		
		surplus = ->ll - .sensitivity;
		..attNutrition += min(surplus, ..bodyRestoration);
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

///////////////////////////////////////////////////////////////////////////// Leeching

Process: proLeechFromHolder {
	Script: condition {
		require(getHolder(self));
		require(getHolder(self).attNutrition > 0);
	}
	
	Script: process {
		getHolder(self)..attNutrition--;
		if (chance(.bodyEfficiency / 100)) {
			self..attNutrition += .bodyRestoration;
		}
	}
}
