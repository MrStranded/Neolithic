WorldGen: genContinental {
	name = "Continental";

	Script: generate {
		setWaterLevel(100);
		print("water level set");

		/*for (t : eachTile()) {
			if (chance(0.00125)) { // 1/8% chance
                destroy(create(formIsland, t));
			}
		}*/
		// for (i = 0; i < 10; i++) {
			// destroy(create(formMountain, randomTile()));
			// print("created mountain");
		// }

		if (false) {
			islands = random(1, 4);
			tiles = eachTile();
			for (i = 0; i < islands; i++) {
				destroy(create(formIsland, random(tiles)));
				print("Created island " + i);
			}

			for (t : tiles) {
				if (getHeight(t) > 120) {
					if (chance(0.005)) {
						create(entDeepSource, t);
					}
				}
			}
		}

		fitTiles(tSand, tDirt, tStone);
	    updatePlanetMesh();
	}
}

Formation: formIsland inherits entTrail {
    name = "Island";

    Script: new(tile) {
        islandParts(tile, formHill, random(1, 6));
        islandParts(tile, formPlateau, random(1, 5));
        islandParts(tile, formMountain, random(0, 4));
        //islandParts(tile, entSource, random(0, 2));
        create(entSource, tile);
    }

    Script: islandParts(tile, type, count) {
        for (i = 0; i < count; i++) {
            destroy(create(type, trail(tile, 50)));
        }
    }
}

Entity: entTrail {
    Script: trail(tile, steps) {
        for (i = 0; i < steps; i++) {
            tile = getNeighbor(tile, random(3));
        }
        return(tile);
    }
}

Formation: formMountain inherits formLift {
    attributes {
        attMinDeviation, 2; attMaxDeviation, 40;
    }

	Script: new(tile) {
		height = random(200,300);
		height2 = height - random(5,50);
		
		east = random(0, 360);
		north = random(-90,90);
		
		// tile = getTileFromCoords(east + 180, north);
		destination = getTileFromCoords(east, north);
		print("origin: " + tile);
		print("destination: " + destination);
		
		path = getTilesOfPath(tile, destination);
		l = length(path);
		l = min(random(3,10), l);
		i = 0;
		for (t : path) {
			// print(t);
			lift(t, height + (height2 - height) * i / l + random(-5, 5));
			i++;
			if (i >= l) { break; }
			
			// if (chance(0.1)) {
				// create(formMountain, getNeighbor(t, random(3)));
			// }
		}
	}

}

Formation: formHill inherits formLift {

	Script: new() {
		height = random(150,200);
		self->lift(self, height);
	}

}

Formation: formPlateau inherits entTrail {
	Script: new() {
		height = random(110,230);
		if (height >= 170) { height = random(130,220);}
		distance = random(12,20);
		self->lift(self, height, distance);

		if (chance(0.5)) {
		    create(entSource, trail(self, random(3, 7)));
		}
	}

	Script: lift(tile, height, distance) {
		if (chance(0.1)) {
			->lift(tile, height + random(5,15), distance / 2);
		} else if (height > getHeight(tile)) {
			setHeight(tile, height);

			for (i=0; i<3; i++) {
				if (distance - random(0,7) >= 0) {
					deviation = random(-1,3);
				} else {
					deviation = random(30,50);
				}
				lift(getNeighbor(tile, i), height - deviation, distance - 1);
			}
		}
	}
}

Formation: formMound inherits formLift {

    attributes {
        attMinDeviation, 1; attMaxDeviation, 20;
    }

	Script: new() {
	    ->lift(self, getHeight(self) + 50);
	    updatePlanetMesh();
	    destroy(self);
	}
}

Formation: formHole inherits formSink {

    attributes {
        attMinDeviation, 1; attMaxDeviation, 20;
    }

	Script: new() {
	    ->sink(self, getHeight(self) - 50);
	    updatePlanetMesh();
	    destroy(self);
	}
}

Formation: formLift {
    attributes {
        attMinDeviation, 1;
        attMaxDeviation, 12;
    }

    Script: new() {
        print("This formation cannot be created directly. Instead use another formation that inherits from this formation.");
    }

	Script: lift(tile, height) {
		if (height > getHeight(tile)) {
			setHeight(tile, height);

			for (n : getNeighbors(tile)) {
				deviation = random(.attMinDeviation, .attMaxDeviation);
				lift(n, height - deviation);
			}
		}
	}
}
Formation: formSink {
    attributes {
        attMinDeviation, 1;
        attMaxDeviation, 12;
    }

    Script: new() {
        print("This formation cannot be created directly. Instead use another formation that inherits from this formation.");
    }

	Script: sink(tile, height) {
		if (height < getHeight(tile)) {
			setHeight(tile, height);

			for (n : getNeighbors(tile)) {
				deviation = random(.attMinDeviation, .attMaxDeviation);
				sink(n, height + deviation);
			}
		}
	}
}

WorldGen: genDesert {
	name = "Desert";

	Script: generate {
		setWaterLevel(50);

		for (t : eachTile()) {
			setHeight(t, 51);
		}

		for (t : eachTile()) {
			if (chance(0.01)) {
				setHeight(t, 49);
			}
		}

		fitTiles();
	}
}