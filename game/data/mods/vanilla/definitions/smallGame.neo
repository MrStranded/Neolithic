///////////////////////////////////////////////////////////////////////////// Tiles

Tile: tDirt {
	name = "Dirt";

	preferredHeight = 128,5;

	topColor {
		200,10;
		150;
		30,10;
	}
	sideColor {
		120,10;
		110,10;
		90;
	}

	Script: tick {
		if (chance(0.01)) {
			change(self,tGras);
		}
		print ("Dirty Test");
	}
}

Tile: tGras {
	name = "Gras";
	preferredHeight = 180;
	preferredHeightBlur = 20;

	topColor {
		120,10;
		200,15;
		50;
	}
	sideColor {
		100,10;
		90,10;
		80;
	}

	attributes {
		attNutrition, 3;
		attHumidity, 50;
	}
}

Tile: tStone {
	preferredHeight = 240;preferredHeightBlur = 10;
	name = "Stone"; topColor {150,10;150;120;}
}

///////////////////////////////////////////////////////////////////////////// Attributes
Attribute: attLife { name = "Life"; }
Attribute: attViewingDistance { name = "Viewing Distance"; }
Attribute: attNutrition { name = "Nutrition"; }
Attribute: attEdible { name = "Edible"; }
Attribute: attLightLevel { name = "Light Level"; }
Attribute: attHumidity { name = "Humidity"; }
Attribute: attLibido { name = "Libido"; }
Attribute: attRestlessness { name = "Restlessness"; }
Attribute: attStepHeight { name = "Step height"; }

///////////////////////////////////////////////////////////////////////////// Creatures

Creature: cMonkey {
	name = "Monkey";
	mesh = "monkey.obj";

	knowledge {
		proStroll;
		proEat;
		proGatherFood;
		proPickUpFood;
		proMate;
		proSearchMate;
		proSleep;
	}

	drives {
		driHunger;
		driMate;
		driSleep;
		driMove;
	}

	attributes {
		attLife, 100;
		attNutrition, 20;
		attSpeed, 3;
		attViewingDistance, 7;
		attStepHeight, 24;
		attLibido, 50;
		attRestlessness, 05;
	}

	Script: place {
		self->id = random(1000);
	}

	Script: tick {
	    if (chance(0.5)) {
		    .attNutrition--;
		}

		.attRestlessness++;
		.attLibido++;

		if (..attNutrition < 0) {
			.attLife--;
		} else if (..attNutrition > 50) {
		    .attLife++;
		}
		if (..attLife < 0) {
		    destroy(self);
        }
	}

	Script: reachable (from, to) {
        h1 = getHeight(from);
        h2 = getHeight(to);
        return ((h2 >= 100) && (abs(h1-h2) <= ..attStepHeight));
	}
}

Drive: driSleep {
	Script: condition {
		require(..attRestlessness <= 30);
	}

	solutions {
		proSleep;
	}
}

Process: proSleep {
	Script: process {
		.attRestlessness += 10;
		.attLife += 10;
	}
}

Drive: driMove {
	Script: condition {
		require(..attRestlessness > 30);
	}

	solutions {
		proStroll;
	}
}

Process: proStroll {
	Script: process {
		tile = getNeighbor(getTile(self), random(3));
		if (self->reachable(getTile(self), tile)) {
		    setAt(self, tile);
		    .attRestlessness -= 5;
		}
	}
	
	//solutions {}
	
	//Script: discovery {}
}

Drive: driMate {
    Script: condition {
        require(self.attNutrition >= 20);
        require(self.attLibido >= 50);
    }

    solutions {
        proMate;
    }
}

Process: proMate {
    Script: condition {
        print(->id + " wants to mate");
        require(->mate);
    }
    Script: process {
        print(->id + " mated!");
        self.attNutrition -= 5;
        self.attLibido -= 50;
        self.attRestlessness -= 100;
        create(getType(self), getTile(self));
    }

    solutions {
        proSearchMate;
    }
}

Process: proSearchMate {
    Script: condition {
        print(->id + " is looking for mate");
        creatures = getCreaturesInRange(getType(self), getTile(self), ..attViewingDistance);
        ->mate = 0;
        for (creature : creatures) {
            if (creature != self) {
                ->mate = creature;
                break;
            }
        }
        if (->mate) { print("found mate"); } else { print("no mate found anywhere"); }
        require(->mate);
    }
    Script: process {
        print(->id + " is going towards mate");
        moveTo(self, ->mate, self..attSpeed);
    }
}

Drive: driHunger {
	Script: condition {
		require(..attNutrition <= 20);
	}

	solutions {
		proEat;
	}
}

Process: proEat {
	Script: condition {
		require(getItemAtt(self, "attEdible"));
	}
	Script: process {
		item = getItemAtt(self, "attEdible");
		item->consume(self);
	}

	solutions {
		proPickUpFood;
		proGatherFood;
	}
}

Process: proPickUpFood {
	Script: condition {
	    ->food = getAttInRange("attEdible",self,0);
		require(->food);
	}
	Script: process() {
		pickUp(self, ->food);
	}
}

Process: proGatherFood {
	Script: condition {
		->food = getAttInRange("attEdible",self,..attViewingDistance);
		require(->food);
	}
	Script: process() {
		moveTo(self, ->food, ..attSpeed);
	}
	Script: discovery() {
		require(..attSpeed > 0);
		require(..attViewingDistance > 0);
	}

	solutions {
	    proStroll;
	}
}

///////////////////////////////////////////////////////////////////////////// Items

Entity: entFruit {
	name = "Apple";
	mesh = "apple02.ply";

	attributes {
		attNutrition, 50;
		attEdible, 1;
	}

	Script: tick() {
		if (chance(0.02)) {
			destroy(self);
		}
	}

	Script: consume(actor) {
		//addPersonalAtt(actor, "attNutrition", ..attNutrition);
		actor.attNutrition += ..attNutrition;
		actor.attRestlessness -= 2;
		destroy(self);
	}
}

///////////////////////////////////////////////////////////////////////////// Plants

Creature: cTree {
	name = "Tree";
	mesh = "tree01.ply";

	drives {
		driPlantReproduction;
	}

	knowledge {
		proPhotoSynthesis;
		proCreateFruit;
	}

	Script: place {
		.attNutrition += random(200);
	}

	attributes{attLightLevel,50;}
}

Drive: driPlantReproduction {
	solutions {
		proCreateFruit;
		proPhotoSynthesis;
	}
}

Process: proPhotoSynthesis {
	Script: condition {
		require(getLightLevel(self) + ..attLightLevel >= 50);
		//require(getTile(self).attHumidity >= 20);
	}
	Script: process {
		//getTile(self)->attHumidity -= 5;
		.attNutrition += 1;
	}

	solutions {} // there is no way for a plant to create light (currently?)

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesisis
		require(0);
	}
}

Process: proCreateFruit {
	Script: condition {
		require(chance(0.1));
		require(!getAttInRange("attEdible", self, 1));
		require(..attNutrition >= 200);
	}

	Script: process {
		fruit = create(entFruit, getTile(self));
		.attNutrition -= 200;
		//pickUp(self, fruit);
	}
}
