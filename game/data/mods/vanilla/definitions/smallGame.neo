///////////////////////////////////////////////////////////////////////////// Global

Script: tick {
    // one minute
    ->minute++;

    if (->minute >= 60) {
        ->minute = 0;
        ->hour++;
        print("Day: " + ->day + " | Hour: " + ->hour);
    }

    if (->hour >= 24) {
        ->hour = 0;
        ->day++;
    }

    changeSunAngle(0.25); // 0.25 * 60 * 24 = 360
}

Script: setTime (hour, minute) {
    ->hour = hour;
    ->minute = minute;

    angle = 360 * (minute + hour*60) / (24*60);
    setSunAngle(angle);
}

///////////////////////////////////////////////////////////////////////////// Tiles

Tile: tDirt {
	name = "Dirt";

	preferredHeight = 150,30;

	topColor {
		150,10;
		100;
		20,10;
	}
	sideColor {
		90,10;
		70,10;
		60;
	}

	Script: tick {
	    /*..attAge++;
		if (.attAge > 3) {
			change(self,tGras); // no wörki-wörki yet
		}*/
	}
}

Tile: tGras {
	name = "Gras";
	preferredHeight = 180;
	preferredHeightBlur = 20;

	topColor {
		120,10;
		200,15;
		50;
	}
	sideColor {
		100,10;
		90,10;
		80;
	}

	attributes {
		attNutrition, 3;
		attHumidity, 50;
	}
}

Tile: tSand {
	name = "Sand";

	preferredHeight = 128,5;

	topColor {
		200,10;
		150;
		30,10;
	}
	sideColor {
		120,10;
		110,10;
		90;
	}
}

Tile: tStone {
	preferredHeight = 240;preferredHeightBlur = 10;
	name = "Stone"; topColor {150,10;150;120;}
}

///////////////////////////////////////////////////////////////////////////// Attributes

// life
Attribute: attHealth { name = "Health"; }
Attribute: attNutrition { name = "Nutrition"; }
Attribute: attSleeping { name = "Sleeping"; }
Attribute: attAge { name = "Age"; }
Attribute: attFatigue { name = "Fatigue"; }
Attribute: attEdible { name = "Edible"; }

// movement
Attribute: attViewingDistance { name = "Viewing Distance"; }
Attribute: attStepHeight { name = "Step height"; }
Attribute: attSpeed { name = "Speed"; }

// environmental
Attribute: attHumidity { name = "Humidity"; }

///////////////////////////////////////////////////////////////////////////// Effects

Effect: effHunger {
    name = "Hunger";

    attributes {
        attHealth, "-1";
        attSpeed, "-1";
    }

    Script: tick (carrier) {
        if (carrier.attNutrition > 0) {
            if (.attHealth < 0) {
                ..attHealth++;
            }
        } else {
            ..attHealth--;
        }
    }

    Script: removeCondition {
        require(.attHealth >= 0);
    }
}

Effect: effDigest {
    name = "Digest";

    Script: tick() { ..attNutrition--; }
    Script: removeCondition() { require(.attNutrition <= 0); }
}

Effect: effAchingFeet {
    name = "Aching feet";

    attributes {
        attFatigue, 10;
        attHealth, "-5";
    }

    Script: tick {
        if ((.attFatigue) > 0 && chance(0.1)) {
            ..attFatigue--;
        }
    }

    Script: removeCondition {
        require (.attFatigue <= 0);
    }
}

///////////////////////////////////////////////////////////////////////////// Creatures

Creature: cMonkey {
	name = "Monkey";
	mesh = "monkey.obj";

	knowledge {
		proEat; proGatherFood; proPickUpFood;
		proMate; proSearchMate;
		proSleep;
		proStroll;
	}

	drives {
		driHunger;
		driMate;
		driSleep;
		driMove;
	}

	attributes {
		attHealth, 100;

		attSpeed, 3;
		attViewingDistance, 7;
		attStepHeight, 24;
	}

	Script: place {
		self->id = random(1000);
		if (main->monkey == 0) {
		    main->monkey = self->id;
        }
	}

	Script: tick {
	    if (.attSleeping <= 0) { // creature is awake
            if (.attNutrition <= 0) { // and malnourished
                if (!getEffects(self,effHunger) && chance(0.1)) {
                    addEffect(self, effHunger);
                }
            }

            if (chance(0.5)) {
                ..attFatigue++;
            }
		}

		if (self->id == main->monkey) {
		    print(self->id + " his stats: -------------------------------------");
		    print("health: " + .attHealth);
		    print("nutrition: " + .attNutrition);
		    print("fatigue: " + .attFatigue);
		    print(getEffects(self));
		}

		if (.attHealth < 0) {
		    if (self->id == main->monkey) {
		        main->monkey = 0;
		    }

		    destroy(self);
        }
	}

	Script: reachable (from, to) {
        h1 = getHeight(from);
        h2 = getHeight(to);
        return ((h2 >= 100) && (abs(h1-h2) <= ..attStepHeight));
	}

	Script: awake() {
	    ..attFatigue = 0;
	}
}

Drive: driSleep {
	Script: condition {
		require(.attFatigue > 250);
		require(getLightLevel(self) <= 50);
	}

	solutions {
		proSleep;
	}
}

Process: proSleep {
	Script: process {
	    addOccupation(self, 700, "awake");
	    ..attSleeping = 1;
	}
}

Drive: driMove {
	Script: condition {
		require(.attFatigue < 300);
	}

	solutions {
		proStroll;
	}
}

Process: proStroll {
	Script: process {
		tile = getNeighbor(getTile(self), random(3));
		if (self->reachable(getTile(self), tile)) {
		    setAt(self, tile);
		    if (chance(0.01)) {
		        addEffect(self, effAchingFeet);
		    }
		}
	}
	
	//solutions {}
	
	//Script: discovery {}
}

Drive: driMate {
    Script: condition {
        require(self.attNutrition >= 69);
        require(self.attFatigue < 420);
    }

    solutions {
        proMate;
    }
}

Process: proMate {
    Script: condition {
        require(->mate);
    }
    Script: process {
        addEffect(self, "Postcoital exhaustion", 30, [
            "attNutrition", -20,
            "attFatigue", 200
        ]);

        child = create(getType(self), getTile(self));
        //mixAttributes(child, self, ->mate, (.attMutationChance + ->mate.attMutationChance)/2, (.attMutationExtent + ->mate.attMutationExtent)/2);
    }

    solutions {
        proSearchMate;
    }
}

Process: proSearchMate {
    Script: condition {
        creatures = getCreaturesInRange(getType(self), getTile(self), .attViewingDistance);
        ->mate = false;
        for (creature : creatures) {
            if (creature != self) {
                ->mate = creature;
                break;
            }
        }
        require(->mate);
    }
    Script: process {
        moveTo(self, ->mate, self.attSpeed);
    }
}

Drive: driHunger {
	Script: condition {
		require(.attNutrition <= 50);
	}

	solutions {
		proEat;
	}
}

Process: proEat {
	Script: condition {
		require(getItemAtt(self, "attEdible"));
	}
	Script: process {
		item = getItemAtt(self, "attEdible");
		item->consume(self);
	}

	solutions {
		proPickUpFood;
		proGatherFood;
	}
}

Process: proPickUpFood {
	Script: condition {
	    ->food = getAttInRange("attEdible",self,0);
		require(->food);
	}
	Script: process() {
		pickUp(self, ->food);
	}
}

Process: proGatherFood {
	Script: condition {
		->food = getAttInRange("attEdible",self,.attViewingDistance);
		require(->food);
	}
	Script: process() {
		moveTo(self, ->food, .attSpeed);
	}
	Script: discovery() {
		require(.attSpeed > 0);
		require(.attViewingDistance > 0);
	}

	solutions {
	    proStroll;
	}
}

///////////////////////////////////////////////////////////////////////////// Items

Entity: entFruit {
	name = "Apple";
	mesh = "apple02.ply";

	attributes {
		attNutrition, 120;
		attEdible, 1;
	}

	Script: tick() {
	    ..attAge++;
		if (.attAge > 1440) {
			destroy(self);
		}
	}

	Script: consume(actor) {
        (addEffect(actor, effDigest))..attNutrition = .attNutrition;

		destroy(self);
	}
}

///////////////////////////////////////////////////////////////////////////// Plants

Creature: cTree {
	name = "Tree";
	mesh = "tree01.ply";

	drives {
		driPlantReproduction;
	}

	knowledge {
		proPhotoSynthesis;
		proCreateFruit;
	}

	Script: place {
		..attNutrition += random(100);
	}

	attributes{}
}

Drive: driPlantReproduction {
	solutions {
		proCreateFruit;
		proPhotoSynthesis;
	}
}

Process: proPhotoSynthesis {
	Script: condition {
		require(getLightLevel(self) >= 50);
	}
	Script: process {
		..attNutrition += 1;
	}

	solutions {} // there is no way for a plant to create light (currently?)

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesisis
		require(0);
	}
}

Process: proCreateFruit {
	Script: condition {
		require(!getAttInRange("attEdible", self, 1));
		require(.attNutrition >= 100);
	}

	Script: process {
		fruit = create(entFruit, getTile(self));
		..attNutrition -= 100;
		//pickUp(self, fruit);
	}
}
