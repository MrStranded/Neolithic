///////////////////////////////////////////////////////////////////////////// Tiles

Tile: tDirt {
	name = "Dirt";

	preferredHeight = 128,5;

	topColor {
		200,10;
		150;
		30,10;
	}
	sideColor {
		120,10;
		110,10;
		90;
	}

	Script: tick {
		if (chance(0.01)) {
			change(self,tGras);
		}
		print ("Dirty Test");
	}
}

Tile: tGras {
	name = "Gras";
	preferredHeight = 180;
	preferredHeightBlur = 20;

	topColor {
		120,10;
		200,15;
		50;
	}
	sideColor {
		100,10;
		90,10;
		80;
	}

	attributes {
		attNutrition, 3;
	}
}

Tile: tStone {
	preferredHeight = 240;preferredHeightBlur = 10;
	name = "Stone"; topColor {150,10;150;120;}
}

///////////////////////////////////////////////////////////////////////////// Attributes
Attribute: attLife { name = "Life"; }
Attribute: attViewingDistance { name = "Viewing Distance"; }
Attribute: attNutrition { name = "Nutrition"; }
Attribute: attEdible { name = "Edible"; }

///////////////////////////////////////////////////////////////////////////// Creatures

Creature: cMonkey {
	name = "Monkey";
	mesh = "monkey.obj";

	knowledge {
		proStroll;
		proEatBread;
	}

	drives {
		driHunger;
	}

	attributes {
		attLife, 10;
		attSpeed, 1;
		attViewingDistance, 10;
		attNutrition, 5;
	}

	Script: place {
		self->id = random(1000);
	}

	Script: tick {
		print("monkey tick " + self->id);
		print("monkey nutrition " + self.attNutrition);
	}
}

Drive: driHunger {
	Script: condition {
		require(getAttribute("attNutrition") <= 5);
	}

	solutions {
		proEat;
	}
}

Process: proStroll {
	//Script: condition {}

	Script: process {
		while (getHeight(tile = getNeighbor(getTile(self), random(3))) < 100) {}
		moveTo(self,tile);
	}
	
	//solutions {}
	
	//Script: discovery {}
}

Process: proEat {
	Script: condition {
		require(getItemAtt(self, "attEdible"));
	}
	Script: process {
		item = getItemAtt(self, "attEdible");
		item->consume(self);
	}

	solutions {
		proGatherFood;
	}
}

Process: proGatherFood {
	Script: condition {
		require(getAttInRange(creature, "attEdible", getAttribute(creature, "attViewingDistance")));
	}
	Script: process(creature) {
		pickUp(creature, getAttInRange(creature, "attEdible", getAttribute(creature,"attViewingDistance")));
	}

	Script: discovery(creature) {
		require(getAttribute(creature, "attSpeed") > 0);
		require(getAttribute(creature, "attViewingDistance") > 0);
	}
}

///////////////////////////////////////////////////////////////////////////// Items

Entity: entFruit {
	name = "Apple";

	attributes {
		attNutrition, 10;
		attEdible, 1;
	}

	Script: consume(actor) {
		print("consume Apple");
		addPersonalAtt(actor, "attNutrition", getAttribute("attNutrition"));
		destroy(self);
	}
}

///////////////////////////////////////////////////////////////////////////// Plants

Creature: cTree {
	name = "Tree";
	mesh = "tree01.ply";

	drives {
		driPlantReproduction;
	}

	knowledge {
		proPhotoSynthesis;
		proCreateFruit;
	}

	Script: tick {
		//print("tick: "+self->ticks++);
	}
}

Drive: driPlantReproduction {
	solutions {
		proPhotoSynthesis;
		proCreateFruit;
	}
}

Process: proPhotoSynthesis {
	Script: condition {
		require(getLightLevel(self) + getAttribute("attLightLevel") >= 50);
		require(getAttribute(getTile(self), "attHumidity") >= 20);
	}
	Script: process {
		//getTile(self)->attHumidity -= 5;
		//self->attNutrition += 5;
	}

	solutions {} // there is no way for a plant to create light (currently?)

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesisis
	}
}

Process: proCreateFruit {
	Script: condition {
		require(chance(0.1));
		require(!getAttInRange(self, "attEdible", 0));
		require(getAttribute("attNutrition") >= 10);
	}
	Script: process {
		fruit = create(entFruit, getTile(self));
		pickUp(self, fruit);
	}
}
