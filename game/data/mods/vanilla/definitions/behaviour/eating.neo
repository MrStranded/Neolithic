
///////////////////////////////////////////////////////////////////////////// Effects

Entity: entShit {
    name = "Shit";
    mesh = "shit01.ply";

    Script: tick {
        //if (isOnFloor(self)) {
            tile = getTile(self);
            if (getType(tile) == tDirt && .attNutrition >= 10) {
                ..attNutrition -= 10;
                change(tile, tGras);
            }

            addEffect(getTile(self), "Fertilized", 1, [ ..attNutrition ]);
            ..attNutrition--;

            if (.attNutrition <= 0) {
                destroy(self);
            }
       // }
    }
}

///////////////////////////////////////////////////////////////////////////// Effects

Effect: effHunger {
    name = "Hunger";

    attributes {
        attHealth, "-1";
        attSpeed, "-1";
    }

    Script: tick (carrier) {
        if (!carrier.attSleeping || chance(0.1)) {
            if (carrier.attNutrition > 0) {
                if (.attHealth < 0) {
                    ..attHealth++;
                }
            } else {
                if (chance(0.5)) {
                    ..attHealth--;
                    carrier..attFatigue++;
                }
            }
        }
    }

    Script: removeCondition {
        require(.attHealth >= 0);
    }
}

Effect: effDigest {
    name = "Digest";

    Script: create() {
        ->shit = create(entShit, self);
    }

    Script: tick(carrier) {
        ..attNutrition--;
        if (chance(carrier.attEfficiency / 100)) {
            carrier..attNutrition++;
        } else {
            ->shit..attNutrition++;
        }
    }
    Script: removeCondition() { require(.attNutrition <= 0); }

    Script: finally(carrier) {
        tile = getTile(carrier);

        items = getItems(self);
        if (items) {
            for (item : items) {
                pickUp(tile, item);
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////// Drives

Drive: driHunger {
	Script: condition {
	    require(! .attSleeping);
	    if (.attNutrition <= 0 && !getEffects(self, effHunger)) {
	        addEffect(self, effHunger);
	    }
		require(.attNutrition <= .attHungerSensitivity);
	}

	solutions {
		proEatVegetarian;
		proEatMeat;
	}

	Script: getWeight() {
	    return(.attHungerSensitivity - .attNutrition);
	}
}

