///////////////////////////////////////////////////////////////////////////// Grow

Drive: driGrow {
    solutions { proGrow; }

    Script: condition { return .attSize < .attMaxSize; }

    Script: getWeight {
        return(100 - 100 * .attSize / .attMaxSize);
    }
}

Process: proGrow {
    Script: condition {
        require(.attNutrition > 0);
    }

    Script: process {
		..attSize += .attGrowthSize;
		..attNutrition -= .attGrowthSize * (100 - .attEfficieny) / 100;
    }
}

///////////////////////////////////////////////////////////////////////////// Grow into tree

Drive: driGrowIntoTree {
    solutions { proGrowIntoTree; }

    Script: condition {
		return true;
	}

    Script: getWeight {
        return 100;
    }
}

Process: proGrowIntoTree {
    Script: condition {
        tile = getTile(self);

        require(isOnFloor(self));
        require(getLightLevel(self) + getTile(self).attLightLevel >= .attLightSensitivity);
        require(getFullAtt(tile, "attSize") < 100);
        require(getHeight(self) >= getWaterHeight(self));
    }
    Script: process {
        setStage(self, "sapling");
		
        for (n : getNeighbors(self)) {
            effect = addEffect(n, effShadow);
            effect->cause = self;
        }
    }
}

///////////////////////////////////////////////////////////////////////////// Photosynthesis

Drive: driGatherEnergy {
    solutions {
		proPhotosynthesis;
		proLeechFromHolder;
	}

    Script: condition { return .attNutrition < .attMaxSize; }

    Script: getWeight {
		nutWeight = 50 * .attNutrition / .attMaxSize;
		waterWeight = 50 * .attWater / .attMaxSize;
        return(100 - nutWeight - waterWeight);
    }
}

Process: proPhotosynthesis {
	Script: condition {
		->ll = getLightLevel(self) + getTile(self).attLightLevel;
		// print("ll: " + ll);
        require(->ll > .attLightSensitivity);
		require(getStage(self) != "seed");
		require(.attWater > 0);
	}
	Script: process {
		if (! chance(.attEfficiency / 100)) { ..attWater--; }
		
		surplus = ->ll - .attLightSensitivity;
		..attNutrition += min(surplus, .attGrowthSize);
	}

	Script: discovery(actor) { // there is no way for an entity to learn photosynthesis
		require(0);
	}
}

///////////////////////////////////////////////////////////////////////////// Leeching

Process: proLeechFromHolder {
	Script: condition {
		require(getHolder(self));
		require(getHolder(self).attNutrition > 0);
	}
	
	Script: process {
		getHolder(self)..attNutrition--;
		if (chance(.attEfficiency / 100)) {
			self..attNutrition++;
		}
	}
}
